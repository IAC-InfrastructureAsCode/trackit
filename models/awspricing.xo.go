// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsPricing represents a row from 'trackit.aws_pricing'.
type AwsPricing struct {
	ID      int    `json:"id"`      // id
	Product string `json:"product"` // product
	Pricing []byte `json:"pricing"` // pricing

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsPricing exists in the database.
func (ap *AwsPricing) Exists() bool {
	return ap._exists
}

// Deleted provides information if the AwsPricing has been deleted from the database.
func (ap *AwsPricing) Deleted() bool {
	return ap._deleted
}

// Insert inserts the AwsPricing to the database.
func (ap *AwsPricing) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ap._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_pricing (` +
		`product, pricing` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ap.Product, ap.Pricing)
	res, err := db.Exec(sqlstr, ap.Product, ap.Pricing)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ap.ID = int(id)
	ap._exists = true

	return nil
}

// Update updates the AwsPricing in the database.
func (ap *AwsPricing) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ap._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ap._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_pricing SET ` +
		`product = ?, pricing = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ap.Product, ap.Pricing, ap.ID)
	_, err = db.Exec(sqlstr, ap.Product, ap.Pricing, ap.ID)
	return err
}

// Save saves the AwsPricing to the database.
func (ap *AwsPricing) Save(db XODB) error {
	if ap.Exists() {
		return ap.Update(db)
	}

	return ap.Insert(db)
}

// Delete deletes the AwsPricing from the database.
func (ap *AwsPricing) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ap._exists {
		return nil
	}

	// if deleted, bail
	if ap._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_pricing WHERE id = ?`

	// run query
	XOLog(sqlstr, ap.ID)
	_, err = db.Exec(sqlstr, ap.ID)
	if err != nil {
		return err
	}

	// set deleted
	ap._deleted = true

	return nil
}

// AwsPricingByID retrieves a row from 'trackit.aws_pricing' as a AwsPricing.
//
// Generated from index 'aws_pricing_id_pkey'.
func AwsPricingByID(db XODB, id int) (*AwsPricing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, pricing ` +
		`FROM trackit.aws_pricing ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ap := AwsPricing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ap.ID, &ap.Product, &ap.Pricing)
	if err != nil {
		return nil, err
	}

	return &ap, nil
}

// AwsPricingByProduct retrieves a row from 'trackit.aws_pricing' as a AwsPricing.
//
// Generated from index 'product'.
func AwsPricingByProduct(db XODB, product string) (*AwsPricing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, pricing ` +
		`FROM trackit.aws_pricing ` +
		`WHERE product = ?`

	// run query
	XOLog(sqlstr, product)
	ap := AwsPricing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, product).Scan(&ap.ID, &ap.Product, &ap.Pricing)
	if err != nil {
		return nil, err
	}

	return &ap, nil
}
