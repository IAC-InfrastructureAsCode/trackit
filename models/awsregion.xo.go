// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsRegion represents a row from 'trackit.aws_region'.
type AwsRegion struct {
	ID     int    `json:"id"`     // id
	Region string `json:"region"` // region
	Pretty string `json:"pretty"` // pretty

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsRegion exists in the database.
func (ar *AwsRegion) Exists() bool {
	return ar._exists
}

// Deleted provides information if the AwsRegion has been deleted from the database.
func (ar *AwsRegion) Deleted() bool {
	return ar._deleted
}

// Insert inserts the AwsRegion to the database.
func (ar *AwsRegion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_region (` +
		`region, pretty` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ar.Region, ar.Pretty)
	res, err := db.Exec(sqlstr, ar.Region, ar.Pretty)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ar.ID = int(id)
	ar._exists = true

	return nil
}

// Update updates the AwsRegion in the database.
func (ar *AwsRegion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ar._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_region SET ` +
		`region = ?, pretty = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ar.Region, ar.Pretty, ar.ID)
	_, err = db.Exec(sqlstr, ar.Region, ar.Pretty, ar.ID)
	return err
}

// Save saves the AwsRegion to the database.
func (ar *AwsRegion) Save(db XODB) error {
	if ar.Exists() {
		return ar.Update(db)
	}

	return ar.Insert(db)
}

// Delete deletes the AwsRegion from the database.
func (ar *AwsRegion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return nil
	}

	// if deleted, bail
	if ar._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_region WHERE id = ?`

	// run query
	XOLog(sqlstr, ar.ID)
	_, err = db.Exec(sqlstr, ar.ID)
	if err != nil {
		return err
	}

	// set deleted
	ar._deleted = true

	return nil
}

// AwsRegionByID retrieves a row from 'trackit.aws_region' as a AwsRegion.
//
// Generated from index 'aws_region_id_pkey'.
func AwsRegionByID(db XODB, id int) (*AwsRegion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, region, pretty ` +
		`FROM trackit.aws_region ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ar := AwsRegion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ar.ID, &ar.Region, &ar.Pretty)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}

// AwsRegionByPretty retrieves a row from 'trackit.aws_region' as a AwsRegion.
//
// Generated from index 'pretty'.
func AwsRegionByPretty(db XODB, pretty string) (*AwsRegion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, region, pretty ` +
		`FROM trackit.aws_region ` +
		`WHERE pretty = ?`

	// run query
	XOLog(sqlstr, pretty)
	ar := AwsRegion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pretty).Scan(&ar.ID, &ar.Region, &ar.Pretty)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}

// AwsRegionByRegion retrieves a row from 'trackit.aws_region' as a AwsRegion.
//
// Generated from index 'region'.
func AwsRegionByRegion(db XODB, region string) (*AwsRegion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, region, pretty ` +
		`FROM trackit.aws_region ` +
		`WHERE region = ?`

	// run query
	XOLog(sqlstr, region)
	ar := AwsRegion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, region).Scan(&ar.ID, &ar.Region, &ar.Pretty)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}
