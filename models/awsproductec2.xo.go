// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsProductEc2 represents a row from 'trackit.aws_product_ec2'.
type AwsProductEc2 struct {
	ID                 int    `json:"id"`                  // id
	Sku                string `json:"sku"`                 // sku
	RegionID           int    `json:"region_id"`           // region_id
	InstanceType       string `json:"instance_type"`       // instance_type
	CurrentGeneration  int    `json:"current_generation"`  // current_generation
	Vcpu               int    `json:"vcpu"`                // vcpu
	Memory             string `json:"memory"`              // memory
	Storage            string `json:"storage"`             // storage
	NetworkPerformance string `json:"network_performance"` // network_performance
	Tenancy            string `json:"tenancy"`             // tenancy
	OperatingSystem    string `json:"operating_system"`    // operating_system
	Ecu                int    `json:"ecu"`                 // ecu

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsProductEc2 exists in the database.
func (ape *AwsProductEc2) Exists() bool {
	return ape._exists
}

// Deleted provides information if the AwsProductEc2 has been deleted from the database.
func (ape *AwsProductEc2) Deleted() bool {
	return ape._deleted
}

// Insert inserts the AwsProductEc2 to the database.
func (ape *AwsProductEc2) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ape._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_product_ec2 (` +
		`sku, region_id, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ape.Sku, ape.RegionID, ape.InstanceType, ape.CurrentGeneration, ape.Vcpu, ape.Memory, ape.Storage, ape.NetworkPerformance, ape.Tenancy, ape.OperatingSystem, ape.Ecu)
	res, err := db.Exec(sqlstr, ape.Sku, ape.RegionID, ape.InstanceType, ape.CurrentGeneration, ape.Vcpu, ape.Memory, ape.Storage, ape.NetworkPerformance, ape.Tenancy, ape.OperatingSystem, ape.Ecu)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ape.ID = int(id)
	ape._exists = true

	return nil
}

// Update updates the AwsProductEc2 in the database.
func (ape *AwsProductEc2) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ape._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ape._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_product_ec2 SET ` +
		`sku = ?, region_id = ?, instance_type = ?, current_generation = ?, vcpu = ?, memory = ?, storage = ?, network_performance = ?, tenancy = ?, operating_system = ?, ecu = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ape.Sku, ape.RegionID, ape.InstanceType, ape.CurrentGeneration, ape.Vcpu, ape.Memory, ape.Storage, ape.NetworkPerformance, ape.Tenancy, ape.OperatingSystem, ape.Ecu, ape.ID)
	_, err = db.Exec(sqlstr, ape.Sku, ape.RegionID, ape.InstanceType, ape.CurrentGeneration, ape.Vcpu, ape.Memory, ape.Storage, ape.NetworkPerformance, ape.Tenancy, ape.OperatingSystem, ape.Ecu, ape.ID)
	return err
}

// Save saves the AwsProductEc2 to the database.
func (ape *AwsProductEc2) Save(db XODB) error {
	if ape.Exists() {
		return ape.Update(db)
	}

	return ape.Insert(db)
}

// Delete deletes the AwsProductEc2 from the database.
func (ape *AwsProductEc2) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ape._exists {
		return nil
	}

	// if deleted, bail
	if ape._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_product_ec2 WHERE id = ?`

	// run query
	XOLog(sqlstr, ape.ID)
	_, err = db.Exec(sqlstr, ape.ID)
	if err != nil {
		return err
	}

	// set deleted
	ape._deleted = true

	return nil
}

// AwsRegion returns the AwsRegion associated with the AwsProductEc2's RegionID (region_id).
//
// Generated from foreign key 'aws_product_ec2_ibfk_1'.
func (ape *AwsProductEc2) AwsRegion(db XODB) (*AwsRegion, error) {
	return AwsRegionByID(db, ape.RegionID)
}

// AwsProductEc2ByID retrieves a row from 'trackit.aws_product_ec2' as a AwsProductEc2.
//
// Generated from index 'aws_product_ec2_id_pkey'.
func AwsProductEc2ByID(db XODB, id int) (*AwsProductEc2, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku, region_id, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu ` +
		`FROM trackit.aws_product_ec2 ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ape := AwsProductEc2{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ape.ID, &ape.Sku, &ape.RegionID, &ape.InstanceType, &ape.CurrentGeneration, &ape.Vcpu, &ape.Memory, &ape.Storage, &ape.NetworkPerformance, &ape.Tenancy, &ape.OperatingSystem, &ape.Ecu)
	if err != nil {
		return nil, err
	}

	return &ape, nil
}

// AwsProductEc2sByRegionID retrieves a row from 'trackit.aws_product_ec2' as a AwsProductEc2.
//
// Generated from index 'region_id'.
func AwsProductEc2sByRegionID(db XODB, regionID int) ([]*AwsProductEc2, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku, region_id, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu ` +
		`FROM trackit.aws_product_ec2 ` +
		`WHERE region_id = ?`

	// run query
	XOLog(sqlstr, regionID)
	q, err := db.Query(sqlstr, regionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AwsProductEc2{}
	for q.Next() {
		ape := AwsProductEc2{
			_exists: true,
		}

		// scan
		err = q.Scan(&ape.ID, &ape.Sku, &ape.RegionID, &ape.InstanceType, &ape.CurrentGeneration, &ape.Vcpu, &ape.Memory, &ape.Storage, &ape.NetworkPerformance, &ape.Tenancy, &ape.OperatingSystem, &ape.Ecu)
		if err != nil {
			return nil, err
		}

		res = append(res, &ape)
	}

	return res, nil
}

// AwsProductEc2BySku retrieves a row from 'trackit.aws_product_ec2' as a AwsProductEc2.
//
// Generated from index 'sku'.
func AwsProductEc2BySku(db XODB, sku string) (*AwsProductEc2, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku, region_id, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu ` +
		`FROM trackit.aws_product_ec2 ` +
		`WHERE sku = ?`

	// run query
	XOLog(sqlstr, sku)
	ape := AwsProductEc2{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sku).Scan(&ape.ID, &ape.Sku, &ape.RegionID, &ape.InstanceType, &ape.CurrentGeneration, &ape.Vcpu, &ape.Memory, &ape.Storage, &ape.NetworkPerformance, &ape.Tenancy, &ape.OperatingSystem, &ape.Ecu)
	if err != nil {
		return nil, err
	}

	return &ape, nil
}
