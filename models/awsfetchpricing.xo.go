// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsFetchPricing represents a row from 'trackit.aws_fetch_pricing'.
type AwsFetchPricing struct {
	ID      int    `json:"id"`      // id
	Product string `json:"product"` // product
	Etag    string `json:"etag"`    // etag

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsFetchPricing exists in the database.
func (afp *AwsFetchPricing) Exists() bool {
	return afp._exists
}

// Deleted provides information if the AwsFetchPricing has been deleted from the database.
func (afp *AwsFetchPricing) Deleted() bool {
	return afp._deleted
}

// Insert inserts the AwsFetchPricing to the database.
func (afp *AwsFetchPricing) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if afp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_fetch_pricing (` +
		`product, etag` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, afp.Product, afp.Etag)
	res, err := db.Exec(sqlstr, afp.Product, afp.Etag)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	afp.ID = int(id)
	afp._exists = true

	return nil
}

// Update updates the AwsFetchPricing in the database.
func (afp *AwsFetchPricing) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !afp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if afp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_fetch_pricing SET ` +
		`product = ?, etag = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, afp.Product, afp.Etag, afp.ID)
	_, err = db.Exec(sqlstr, afp.Product, afp.Etag, afp.ID)
	return err
}

// Save saves the AwsFetchPricing to the database.
func (afp *AwsFetchPricing) Save(db XODB) error {
	if afp.Exists() {
		return afp.Update(db)
	}

	return afp.Insert(db)
}

// Delete deletes the AwsFetchPricing from the database.
func (afp *AwsFetchPricing) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !afp._exists {
		return nil
	}

	// if deleted, bail
	if afp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_fetch_pricing WHERE id = ?`

	// run query
	XOLog(sqlstr, afp.ID)
	_, err = db.Exec(sqlstr, afp.ID)
	if err != nil {
		return err
	}

	// set deleted
	afp._deleted = true

	return nil
}

// AwsFetchPricingByID retrieves a row from 'trackit.aws_fetch_pricing' as a AwsFetchPricing.
//
// Generated from index 'aws_fetch_pricing_id_pkey'.
func AwsFetchPricingByID(db XODB, id int) (*AwsFetchPricing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, etag ` +
		`FROM trackit.aws_fetch_pricing ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	afp := AwsFetchPricing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&afp.ID, &afp.Product, &afp.Etag)
	if err != nil {
		return nil, err
	}

	return &afp, nil
}

// AwsFetchPricingByProduct retrieves a row from 'trackit.aws_fetch_pricing' as a AwsFetchPricing.
//
// Generated from index 'product'.
func AwsFetchPricingByProduct(db XODB, product string) (*AwsFetchPricing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, etag ` +
		`FROM trackit.aws_fetch_pricing ` +
		`WHERE product = ?`

	// run query
	XOLog(sqlstr, product)
	afp := AwsFetchPricing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, product).Scan(&afp.ID, &afp.Product, &afp.Etag)
	if err != nil {
		return nil, err
	}

	return &afp, nil
}
