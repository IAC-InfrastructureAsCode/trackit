// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsProductPricingEc2 represents a row from 'trackit.aws_product_pricing_ec2'.
type AwsProductPricingEc2 struct {
	Sku                string `json:"sku"`                 // sku
	Etag               string `json:"etag"`                // etag
	Region             string `json:"region"`              // region
	InstanceType       string `json:"instance_type"`       // instance_type
	CurrentGeneration  bool   `json:"current_generation"`  // current_generation
	Vcpu               int    `json:"vcpu"`                // vcpu
	Memory             string `json:"memory"`              // memory
	Storage            string `json:"storage"`             // storage
	NetworkPerformance string `json:"network_performance"` // network_performance
	Tenancy            string `json:"tenancy"`             // tenancy
	OperatingSystem    string `json:"operating_system"`    // operating_system
	Ecu                string `json:"ecu"`                 // ecu

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsProductPricingEc2 exists in the database.
func (appe *AwsProductPricingEc2) Exists() bool {
	return appe._exists
}

// Deleted provides information if the AwsProductPricingEc2 has been deleted from the database.
func (appe *AwsProductPricingEc2) Deleted() bool {
	return appe._deleted
}

// Insert inserts the AwsProductPricingEc2 to the database.
func (appe *AwsProductPricingEc2) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if appe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO trackit.aws_product_pricing_ec2 (` +
		`sku, etag, region, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, appe.Sku, appe.Etag, appe.Region, appe.InstanceType, appe.CurrentGeneration, appe.Vcpu, appe.Memory, appe.Storage, appe.NetworkPerformance, appe.Tenancy, appe.OperatingSystem, appe.Ecu)
	_, err = db.Exec(sqlstr, appe.Sku, appe.Etag, appe.Region, appe.InstanceType, appe.CurrentGeneration, appe.Vcpu, appe.Memory, appe.Storage, appe.NetworkPerformance, appe.Tenancy, appe.OperatingSystem, appe.Ecu)
	if err != nil {
		return err
	}

	// set existence
	appe._exists = true

	return nil
}

// Update updates the AwsProductPricingEc2 in the database.
func (appe *AwsProductPricingEc2) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !appe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if appe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE trackit.aws_product_pricing_ec2 SET ` +
		`region = ?, instance_type = ?, current_generation = ?, vcpu = ?, memory = ?, storage = ?, network_performance = ?, tenancy = ?, operating_system = ?, ecu = ?` +
		` WHERE sku = ? AND etag = ?`

	// run query
	XOLog(sqlstr, appe.Region, appe.InstanceType, appe.CurrentGeneration, appe.Vcpu, appe.Memory, appe.Storage, appe.NetworkPerformance, appe.Tenancy, appe.OperatingSystem, appe.Ecu, appe.Sku, appe.Etag)
	_, err = db.Exec(sqlstr, appe.Region, appe.InstanceType, appe.CurrentGeneration, appe.Vcpu, appe.Memory, appe.Storage, appe.NetworkPerformance, appe.Tenancy, appe.OperatingSystem, appe.Ecu, appe.Sku, appe.Etag)
	return err
}

// Save saves the AwsProductPricingEc2 to the database.
func (appe *AwsProductPricingEc2) Save(db XODB) error {
	if appe.Exists() {
		return appe.Update(db)
	}

	return appe.Insert(db)
}

// Delete deletes the AwsProductPricingEc2 from the database.
func (appe *AwsProductPricingEc2) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !appe._exists {
		return nil
	}

	// if deleted, bail
	if appe._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM trackit.aws_product_pricing_ec2 WHERE sku = ? AND etag = ?`

	// run query
	XOLog(sqlstr, appe.Sku, appe.Etag)
	_, err = db.Exec(sqlstr, appe.Sku, appe.Etag)
	if err != nil {
		return err
	}

	// set deleted
	appe._deleted = true

	return nil
}

// AwsProductPricingEc2ByEtag retrieves a row from 'trackit.aws_product_pricing_ec2' as a AwsProductPricingEc2.
//
// Generated from index 'aws_product_pricing_ec2_etag_pkey'.
func AwsProductPricingEc2ByEtag(db XODB, etag string) (*AwsProductPricingEc2, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`sku, etag, region, instance_type, current_generation, vcpu, memory, storage, network_performance, tenancy, operating_system, ecu ` +
		`FROM trackit.aws_product_pricing_ec2 ` +
		`WHERE etag = ?`

	// run query
	XOLog(sqlstr, etag)
	appe := AwsProductPricingEc2{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, etag).Scan(&appe.Sku, &appe.Etag, &appe.Region, &appe.InstanceType, &appe.CurrentGeneration, &appe.Vcpu, &appe.Memory, &appe.Storage, &appe.NetworkPerformance, &appe.Tenancy, &appe.OperatingSystem, &appe.Ecu)
	if err != nil {
		return nil, err
	}

	return &appe, nil
}
