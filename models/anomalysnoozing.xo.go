// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AnomalySnoozing represents a row from 'trackit.anomaly_snoozing'.
type AnomalySnoozing struct {
	ID        int    `json:"id"`         // id
	UserID    int    `json:"user_id"`    // user_id
	AnomalyID string `json:"anomaly_id"` // anomaly_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AnomalySnoozing exists in the database.
func (as *AnomalySnoozing) Exists() bool {
	return as._exists
}

// Deleted provides information if the AnomalySnoozing has been deleted from the database.
func (as *AnomalySnoozing) Deleted() bool {
	return as._deleted
}

// Insert inserts the AnomalySnoozing to the database.
func (as *AnomalySnoozing) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if as._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.anomaly_snoozing (` +
		`user_id, anomaly_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, as.UserID, as.AnomalyID)
	res, err := db.Exec(sqlstr, as.UserID, as.AnomalyID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	as.ID = int(id)
	as._exists = true

	return nil
}

// Update updates the AnomalySnoozing in the database.
func (as *AnomalySnoozing) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if as._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.anomaly_snoozing SET ` +
		`user_id = ?, anomaly_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, as.UserID, as.AnomalyID, as.ID)
	_, err = db.Exec(sqlstr, as.UserID, as.AnomalyID, as.ID)
	return err
}

// Save saves the AnomalySnoozing to the database.
func (as *AnomalySnoozing) Save(db XODB) error {
	if as.Exists() {
		return as.Update(db)
	}

	return as.Insert(db)
}

// Delete deletes the AnomalySnoozing from the database.
func (as *AnomalySnoozing) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !as._exists {
		return nil
	}

	// if deleted, bail
	if as._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.anomaly_snoozing WHERE id = ?`

	// run query
	XOLog(sqlstr, as.ID)
	_, err = db.Exec(sqlstr, as.ID)
	if err != nil {
		return err
	}

	// set deleted
	as._deleted = true

	return nil
}

// User returns the User associated with the AnomalySnoozing's UserID (user_id).
//
// Generated from foreign key 'anomaly_snoozing_ibfk_1'.
func (as *AnomalySnoozing) User(db XODB) (*User, error) {
	return UserByID(db, as.UserID)
}

// AnomalySnoozingByID retrieves a row from 'trackit.anomaly_snoozing' as a AnomalySnoozing.
//
// Generated from index 'anomaly_snoozing_id_pkey'.
func AnomalySnoozingByID(db XODB, id int) (*AnomalySnoozing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, anomaly_id ` +
		`FROM trackit.anomaly_snoozing ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	as := AnomalySnoozing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&as.ID, &as.UserID, &as.AnomalyID)
	if err != nil {
		return nil, err
	}

	return &as, nil
}

// AnomalySnoozingByUserIDAnomalyID retrieves a row from 'trackit.anomaly_snoozing' as a AnomalySnoozing.
//
// Generated from index 'user_id'.
func AnomalySnoozingByUserIDAnomalyID(db XODB, userID int, anomalyID string) (*AnomalySnoozing, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, anomaly_id ` +
		`FROM trackit.anomaly_snoozing ` +
		`WHERE user_id = ? AND anomaly_id = ?`

	// run query
	XOLog(sqlstr, userID, anomalyID)
	as := AnomalySnoozing{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, anomalyID).Scan(&as.ID, &as.UserID, &as.AnomalyID)
	if err != nil {
		return nil, err
	}

	return &as, nil
}
