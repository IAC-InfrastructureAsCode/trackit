// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsProductPricingUpdate represents a row from 'trackit.aws_product_pricing_update'.
type AwsProductPricingUpdate struct {
	ID      int    `json:"id"`      // id
	Product string `json:"product"` // product
	Etag    string `json:"etag"`    // etag

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsProductPricingUpdate exists in the database.
func (appu *AwsProductPricingUpdate) Exists() bool {
	return appu._exists
}

// Deleted provides information if the AwsProductPricingUpdate has been deleted from the database.
func (appu *AwsProductPricingUpdate) Deleted() bool {
	return appu._deleted
}

// Insert inserts the AwsProductPricingUpdate to the database.
func (appu *AwsProductPricingUpdate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if appu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_product_pricing_update (` +
		`product, etag` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, appu.Product, appu.Etag)
	res, err := db.Exec(sqlstr, appu.Product, appu.Etag)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	appu.ID = int(id)
	appu._exists = true

	return nil
}

// Update updates the AwsProductPricingUpdate in the database.
func (appu *AwsProductPricingUpdate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !appu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if appu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_product_pricing_update SET ` +
		`product = ?, etag = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, appu.Product, appu.Etag, appu.ID)
	_, err = db.Exec(sqlstr, appu.Product, appu.Etag, appu.ID)
	return err
}

// Save saves the AwsProductPricingUpdate to the database.
func (appu *AwsProductPricingUpdate) Save(db XODB) error {
	if appu.Exists() {
		return appu.Update(db)
	}

	return appu.Insert(db)
}

// Delete deletes the AwsProductPricingUpdate from the database.
func (appu *AwsProductPricingUpdate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !appu._exists {
		return nil
	}

	// if deleted, bail
	if appu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_product_pricing_update WHERE id = ?`

	// run query
	XOLog(sqlstr, appu.ID)
	_, err = db.Exec(sqlstr, appu.ID)
	if err != nil {
		return err
	}

	// set deleted
	appu._deleted = true

	return nil
}

// AwsProductPricingUpdateByID retrieves a row from 'trackit.aws_product_pricing_update' as a AwsProductPricingUpdate.
//
// Generated from index 'aws_product_pricing_update_id_pkey'.
func AwsProductPricingUpdateByID(db XODB, id int) (*AwsProductPricingUpdate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, etag ` +
		`FROM trackit.aws_product_pricing_update ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	appu := AwsProductPricingUpdate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&appu.ID, &appu.Product, &appu.Etag)
	if err != nil {
		return nil, err
	}

	return &appu, nil
}

// AwsProductPricingUpdateByProduct retrieves a row from 'trackit.aws_product_pricing_update' as a AwsProductPricingUpdate.
//
// Generated from index 'product'.
func AwsProductPricingUpdateByProduct(db XODB, product string) (*AwsProductPricingUpdate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, product, etag ` +
		`FROM trackit.aws_product_pricing_update ` +
		`WHERE product = ?`

	// run query
	XOLog(sqlstr, product)
	appu := AwsProductPricingUpdate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, product).Scan(&appu.ID, &appu.Product, &appu.Etag)
	if err != nil {
		return nil, err
	}

	return &appu, nil
}
